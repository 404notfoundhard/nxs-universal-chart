{{- $CJ := dict -}}
{{- if .Values.cronJobs -}}
{{- if kindIs "string" .Values.cronJobs -}}
{{- $CJ = fromYaml .Values.cronJobs -}}
{{- else if kindIs "map" .Values.cronJobs -}}
{{- $CJ = .Values.cronJobs -}}
{{- end -}}
{{- else if .Values.cronJobsFileName -}}
{{- $CJ = fromYaml (.Files.Get .Values.cronJobsFileName) -}}
{{- end -}}
{{- $general := $.Values.cronJobsGeneral -}}
{{- range $CJ.jobs }}
{{- $job := . -}}
{{- $cronJobName := include "helpers.app.fullname" (dict "name" .name "context" $) }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $cronJobName }}
  namespace: {{ $.Release.Namespace | quote }}
  labels:
  {{- include "helpers.app.labels" $ | nindent 4 }}
  {{- if .labels }}
  {{- include "helpers.tplvalues.render" (dict "value" .labels "context" $) | nindent 4 }}
  {{- end }}
  {{- if $.Values.generic.labels }}
  {{- include "helpers.tplvalues.render" (dict "value" $.Values.generic.labels "context" $) | nindent 4 }}
  {{- end }}
  annotations:
  {{- if $.Values.generic.annotations }}
  {{- include "helpers.tplvalues.render" (dict "value" $.Values.generic.annotations "context" $) | nindent 4 }}
  {{- end }}
  {{- if .annotations }}
  {{- include "helpers.tplvalues.render" (dict "value" .annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  schedule: {{ include "helpers.tplvalues.render" (dict "value" .schedule "context" $) | quote }}
  {{- if .single_only }}
  concurrencyPolicy: Forbid
  {{- end }}
  {{- if .startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .startingDeadlineSeconds }}
  {{- else if $general.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ $general.startingDeadlineSeconds }}
  {{- end }}
  {{- if .successfulJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  {{- else if $general.successfulJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ $general.successfulJobsHistoryLimit }}
  {{- end }}
  {{- if .failedJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  {{- else if $general.failedJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ $general.failedJobsHistoryLimit }}
  {{- end }}
  jobTemplate:
    spec:
      {{- if .parallelism }}
      parallelism: {{ .parallelism }}
      {{- else if $general.parallelism }}
      parallelism: {{ $general.parallelism }}
      {{- end }}
      {{- if .completions }}
      completions: {{ .completions }}
      {{- else if $general.completions }}
      completions: {{ $general.completions }}
      {{- end }}
      {{- if .activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .activeDeadlineSeconds }}
      {{- else if $general.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ $general.activeDeadlineSeconds }}
      {{- end }}
      {{- if .backoffLimit }}
      backoffLimit: {{ .backoffLimit }}
      {{- else if $general.backoffLimit }}
      backoffLimit: {{ $general.backoffLimit }}
      {{- end }}
      {{- if .ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .ttlSecondsAfterFinished }}
      {{- else if $general.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ $general.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        metadata:
          labels:
            {{- if .extraSelectorLabels }}
            {{- include "helpers.tplvalues.render" (dict "value" .extraSelectorLabels "context" $) | nindent 12 }}
            {{- else if $.Values.generic.extraSelectorLabels }}
            {{- include "helpers.tplvalues.render" (dict "value" $.Values.generic.extraSelectorLabels "context" $) | nindent 12 }}
            {{- end }}
            {{- if .podLabels }}
            {{- include "helpers.tplvalues.render" (dict "value" .podLabels "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.generic.podLabels }}
            {{- include "helpers.tplvalues.render" ( dict "value" $.Values.generic.podLabels "context" $ ) | nindent 12 }}
            {{- end }}
          annotations:
            {{- if $.Values.generic.podAnnotations }}
            {{- include "helpers.tplvalues.render" ( dict "value" $.Values.generic.podAnnotations "context" $ ) | nindent 12 }}
            {{- end }}
            {{- if .podAnnotations }}
            {{- include "helpers.tplvalues.render" ( dict "value" .podAnnotations "context" $) | nindent 12 }}
            {{- end }}
        spec:
          {{- if .serviceAccountName }}
          serviceAccountName: {{ .serviceAccountName }}
          {{- else if $.Values.generic.serviceAccountName }}
          serviceAccountName: {{ $.Values.generic.serviceAccountName }}
          {{- end }}
          {{- if .hostAliases }}
          hostAliases: {{- include "helpers.tplvalues.render" (dict "value" .hostAliases "context" $) | nindent 12 }}
          {{- else if $.Values.generic.hostAliases }}
          hostAliases: {{- include "helpers.tplvalues.render" (dict "value" $.Values.generic.hostAliases "context" $) | nindent 12 }}
          {{- end }}
          {{- if .affinity }}
          affinity: {{- include "helpers.tplvalues.render" ( dict "value" .affinity "context" $) | nindent 12 }}
          {{- else if $general.affinity }}
          affinity: {{- include "helpers.tplvalues.render" ( dict "value" $general.affinity "context" $) | nindent 12 }}
          {{- else }}
          affinity:
            nodeAffinity: {{- include "helpers.affinities.nodes" (dict "type" $.Values.nodeAffinityPreset.type "key" $.Values.nodeAffinityPreset.key "values" $.Values.nodeAffinityPreset.values) | nindent 14 }}
            podAffinity: {{- include "helpers.affinities.pods" (dict "type" $.Values.podAffinityPreset "context" $) | nindent 14 }}
            podAntiAffinity: {{- include "helpers.affinities.pods" (dict "type" $.Values.podAntiAffinityPreset "context" $) | nindent 14 }}
          {{- end }}
          {{- with .podSecurityContext }}
          securityContext: {{- include "helpers.tplvalues.render" (dict "value" . "context" $) nindent 12 }}
          {{- end }}
          {{- if .dnsPolicy }}
          dnsPolicy: {{ .dnsPolicy }}
          {{- else if $.Values.generic.dnsPolicy }}
          dnsPolicy: {{ $.Values.generic.dnsPolicy }}
          {{- end }}
          {{- with .nodeSelector }}
          nodeSelector: {{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 12 }}
          {{- end }}
          {{- with .tolerations }}
          tolerations: {{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 12 }}
          {{- end }}
          {{ if or $.Values.generic.imagePullSecrets .imagePullSecrets }}
          imagePullSecrets:
            {{- range $sName, $v := $.Values.generic.imagePullSecrets }}
          - name: {{ $sName }}
            {{- end }}
            {{- if .imagePullSecrets }}
            {{- include "helpers.tplvalues.render" ( dict "value" .imagePullSecrets "context" $) | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with .initContainers}}
          initContainers:
          {{- range . }}
          - name: {{ .name | default $cronJobName }}
            image: {{ .image | default $.Values.generic.defaultImage }}:{{ .imageTag | default  $.Values.generic.defaultImageTag }}
            imagePullPolicy: {{ .imagePullPolicy | default "IfNotPresent" }}
            {{- with .containerSecurityContext }}
            securityContext: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- if and .args (not $job.max_duration) }}
            args: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .command }}
            {{- if typeIs "string" . }}
            {{- if $job.max_duration }}
            command: ["/bin/bash"]
            args: ["-c", "/usr/bin/timeout --preserve-status {{ $job.max_duration }} {{ . }}; exit_status=$?; if [[ $exit_status -eq 143 ]]; then echo 'Max execution exceeded after {{ $job.max_duration }} seconds (Added by task #91828)!'; fi; exit $exit_status"]
            {{- else }}
            command: {{ printf "[\"%s\"]" (join ("\", \"") (without (splitList " " . ) "" )) }}
            {{- end }}
            {{- else -}}
            command: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- end }}
            env:
            {{- include "helpers.secrets.include" $ | nindent 14 }}
            {{- with .env }}
            {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .envFrom }}
            envFrom: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .ports }}
            ports: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- $volMounts := list -}}
            {{- if .volumeMounts -}}{{- $volMounts = concat $volMounts .volumeMounts -}}{{- end }}
            {{- if $general.extraVolumeMounts -}}{{- $volMounts = concat $volMounts $general.extraVolumeMounts -}}{{- end }}
            {{- if $.Values.generic.extraVolumeMounts -}}{{- $volMounts = concat $volMounts $.Values.generic.extraVolumeMounts -}}{{- end -}}
            {{- if not (empty $volMounts) }}
            volumeMounts: {{- include "helpers.volumes.mount" (dict "mounts" $volMounts "context" $) | indent 12 }}
            {{- end }}
          {{- end }}{{- end }}
          {{- $containers := list -}}
          {{- if .containers -}}{{- $containers = .containers -}}{{- else -}}{{- $containers = append list . -}}{{- end }}
          containers:
          {{- range $containers }}
          - name: {{ .name | default $cronJobName }}
            image: {{ .image | default $.Values.generic.defaultImage }}:{{ .imageTag | default  $.Values.generic.defaultImageTag }}
            imagePullPolicy: {{ .imagePullPolicy | default "IfNotPresent" }}
            {{- with .containerSecurityContext }}
            securityContext: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            env:
            {{- include "helpers.secrets.include" $ | nindent 14 }}
            {{- with .env }}
            {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .envFrom }}
            envFrom: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- if and .args (not $job.max_duration) }}
            args: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .command }}
            {{- if typeIs "string" . }}
            {{- if $job.max_duration }}
            command: ["/bin/bash"]
            args: ["-c", "/usr/bin/timeout --preserve-status {{ $job.max_duration }} {{ . }}; exit_status=$?; if [[ $exit_status -eq 143 ]]; then echo 'Max execution exceeded after {{ $job.max_duration }} seconds (Added by task #91828)!'; fi; exit $exit_status"]
            {{- else }}
            command: {{ printf "[\"%s\"]" (join ("\", \"") (without (splitList " " . ) "" )) }}
            {{- end }}
            {{- else -}}
            command: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- end }}
            {{- with .lifecycle }}
            lifecycle: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .livenessProbe }}
            livenessProbe: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .readinessProbe }}
            readinessProbe: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .resources }}
            resources: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- $volMounts := list -}}
            {{- if .volumeMounts -}}{{- $volMounts = concat $volMounts .volumeMounts -}}{{- end }}
            {{- if $general.extraVolumeMounts -}}{{- $volMounts = concat $volMounts $general.extraVolumeMounts -}}{{- end }}
            {{- if $.Values.generic.extraVolumeMounts -}}{{- $volMounts = concat $volMounts $.Values.generic.extraVolumeMounts -}}{{- end -}}
            {{- if not (empty $volMounts) }}
            volumeMounts: {{- include "helpers.volumes.mount" (dict "mounts" $volMounts "context" $) | indent 12 }}
            {{- end }}
          {{- end }}
          volumes:
          {{- with .volumes }}{{- include "helpers.volumes.typed" ( dict "volumes" . "context" $) | indent 10}}{{- end }}
          {{- if .extraVolumes }}{{- include "helpers.tplvalues.render" ( dict "value" .extraVolumes "context" $) | nindent 10 }}{{- end }}
          {{- if $general.extraVolumes }}{{- include "helpers.tplvalues.render" ( dict "value" $general.extraVolumes "context" $) | nindent 10 }}{{- end }}
          {{- if $.Values.generic.extraVolumes }}{{- include "helpers.tplvalues.render" ( dict "value" $.Values.generic.extraVolumes "context" $) | nindent 10 }}{{- end }}
          restartPolicy: {{ .restartPolicy | default "Never" }}
{{- end }}
