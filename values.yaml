# generic - values that uses by all nxs-chart templates
generic:
  domain: nixys.ru
  labels: {}
#    general-label: general-label-value
  annotations: {}
#    general-annotation: general-annotation-value

# --set "envs.FOO=bar,envs.TEST=true"
envs: {}
#  BAR: foo
#  TEST: true

# --set "envsString=$ENVS_STRING"
envsString: ""
#envsString: |
#  BAR2: foo2

# --set "secretEnvs.FOO=bar"
secretEnvs: {}
#  FOO: bar

# --set "secretEnvsString=$SECRET_ENVS_STRING"
secretEnvsString: ""
#secretEnvsString: |
#  FOO: BAR

imagePullSecrets: {}
#  registry.org: |
#    {"auths":{"registry.org":{"auth":"cnd1c2VyOnNlY3VyZVBANXM="}}}
#  registry.org-rw: b64:eyJhdXRocyI6eyJyZWdpc3RyeS5vcmciOnsiYXV0aCI6ImNuZDFjMlZ5T25ObFkzVnlaVkJBTlhNPSJ9fX0=

defaultImage: your.registry.com/some-cool-app
defaultImageTag: latest

ingresses:
- annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "128m"
  tls: true
  certManager:
    issuerType: cluster-issuer
    issuerName: letsencrypt
  hosts:
  - hostname:
    paths:
    - path: /
      pathType: prefix
      servicePort: api
- annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
  - hostname: nixys.org
    paths:
    - path: /api
      servicePort: api
  - hostname: nixys.com
    paths:
    - path: /api
      servicePort: api
  extraTls:
  - hosts:
    - nixys.com
    - nixys.org
    secretName: "{{ .Release.Name }}-domain-tls"

deployments:
- name:
  labels:
  podLabels:
  replicas: 2
  extraSelectorLabels:
    app: app-extra-selector
  serviceAccountName: deployer
  #  affinity:
  #    nodeAffinity:
  #      requiredDuringSchedulingIgnoredDuringExecution:
  #        nodeSelectorTerms:
  #        - matchExpressions:
  #          - key: noderole/pay-dev
  #            operator: In
  #            values:
  #            - "true"
  containers:
  - name: nginx
    image: nginx
    imageTag: 1.19
    imagePullPolicy: Always
    env:
      MY_ENV: "1234"
      QTE: safn8
    envsFromSecret:
      testenv:
      - JAVA_OPTS: JVM_OPTS
      - QWE
    envSecrets:
    - secret-envs
    envsFromConfigmap:
      some-cm:
      - LEL: LOL
    envConfigmaps:
    - envs
    ports:
    - name: http
      containerPort: 8080
    volumeMounts:
    - templatedName: secret-file
      mountPath: /var/lib/secret
    - pvcName: app-pvc
      mountPath: /var/www/html/files
  volumes:
  - name: secret-file
    type: secret
  - name: app-pvc
    type: pvc

services:
- name: nginx
  ports:
  - name: http
    protocol: TCP
    port: 8080
  extraSelectorLabels:
    app: app-extra-selector

secrets:
  webadmin:
    data:
      QWE: rty
      JVM_OPTS: |
        "-Duser.timezone=GMT+7" \
        "-Xmx${XMX}" \
        "-Dlog4j.configurationFile=/etc/ntk-myhome-auth/log4j2.xml" \
        "-Dcom.sun.management.jmxremote" \
        "-Dcom.sun.management.jmxremote.port=9038" \
        "-Dcom.sun.management.jmxremote.local.only=false" \
        "-Dcom.sun.management.jmxremote.authenticate=false" \
        "-Dcom.sun.management.jmxremote.ssl=false" \
        "-Dnetworkaddress.cache.ttl=5s" \
        "-javaagent:/jmx_prometheus_javaagent.jar=7039:/prometheus.yaml" \
        "-javaagent:/elastic-apm-agent.jar" \
        "-Delastic.apm.enable_log_correlation=true" \
        "-Delastic.apm.server_urls=http://apm-server-apm-server.logging.svc:8200" \
  ## --set "secrets.test1.labels.blah=blah,secrets.test1.data.BAR=foo"
  #test1:
  #  labels:
  #    blah: blah
  #  data:
  #    BAR: foo
  ## --set "secrets.secret-file.data.api\.key=$SOME_ENV"
  #secret-file:
  #  data:
  #    api.key: |-
  #      JFczZwReBkJFczZwReBkJFczZwReBkJFczZwReBk
  ## --set "secrets.domain-tls.type=kubernetes.io\/tls,secrets.domain-tls.data.tls\.crt=$(cat tls.crt),secrets.domain-tls.data.tls\.key=$(cat tls.key)"
  #domain-tls:
  #  type: kubernetes.io/tls
  #  data:
  #    tls.crt: |-
  #      -----BEGIN CERTIFICATE-----
  #      MIIC2DCCAcCgAwIBAgIBATANBgkqh
  #      -----END CERTIFICATE-----
  #    tls.key: |-
  #      -----BEGIN RSA PRIVATE KEY-----
  #      MIIEowIBAAKCAQEA1//LmU7tdWt/fgbqh1Feh+JFczZwReBkkyW
  #      -----END RSA PRIVATE KEY-----
  ## --set "secrets.json-file.data.file\.json=$(printf %q $(cat file.json))"
  #json-file:
  #  data:
  #    file.json: {
  #      "arg": "value"
  #    }

configMaps:
  some-cm:
    labels:
      kek: lol
    data:
      LOL: kek
  json-file:
   data:
     file.json: {
       "arg": "value"
     }

# All PVSs will be added to `volumes` block in each workload excluding hooks
pvcs:
- name: app-pvc
  accessModes:
  - ReadWriteOnce
  - ReadWriteMany
  size: 8Gi

servicemonitors:
- endpoints:
  - interval: 30s
    port: exporter
    path: /metrics
  extraSelectorLabels:
    app: nginx
  labels:
    foo: foo

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard, nil
##
podAffinityPreset: soft

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard, nil
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

cronJobs:
  jobs:
  - name: generate-data
    schedule: "*/5 * * * *"
    command: "php yii crontab/generate-data"
    single_only: true
    duration_alert: 600
    max_duration: 800
    volumeMounts:
    - name: secret-file
      mountPath: /etc/app
      readOnly: true
    volumes:
    - name: secret-file
      type: secret
      items:
      - key: app.conf
        mode: 0600
  - name: auto-sender
    schedule: "*/5 * * * *"
    command: "php yii crontab/auto-sender"

jobs:
  jobs:
  - name: refresh-cache
    command: "php yii crontab/refresh-cache"
    duration_alert: 30
    max_duration: 60
