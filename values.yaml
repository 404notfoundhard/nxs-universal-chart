#
## global - переменные, которые пользуют все манифесты
#

global:
  defaultImage: privat.registry.com/some-cool-app
  defaultImageTag: latest
  domain: nixys.ru
  labels:
    general-label: lbl-value
  annotations:
    general-annotation: ant-value
# --set global.secretEnvs=$SECRET_ENVS
  secretEnvs:
    FOO: bar
    BAR: foo

ingresses:
- annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "128m"
  tls: true
  certManager:
    issuerType: cluster-issuer
    issuerName: letsencrypt
  hosts:
  - hostname:
    paths:
    - path: /
      pathType:
      servicePort:
- annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
  - hostname: nixys.org
    paths:
    - path: /api
      servicePort: api
  - hostname: nixys.com
    paths:
    - path: /api
      servicePort: api
  extraTls:
  - hosts:
    - nixys.com
    - nixys.org
    secretName: "{{ .Release.Name }}-domain-tls"

deployments:
- name:
  labels:
  podLabels:
  replicas: 2
  extraSelectorLabels:
    app: app-extra-selector
  serviceAccountName: deployer
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#        - matchExpressions:
#          - key: noderole/pay-dev
#            operator: In
#            values:
#            - "true"
  containers:
  - name: nginx
    image: nginx
    imageTag: 1.19
    imagePullPolicy: Always
    ports:
    - name: http
      containerPort: 8080
    volumeMounts:
    - templatedName: secret-file
      mountPath: /var/lib/secret
    - pvcName: app-pvc
      mountPath: /var/www/html/files
  templatedVolumes:
  - templatedName: secret-file
    type: secret

services:
- name: nginx
  ports:
  - name: http
    protocol: TCP
    port: 8080
  extraSelectorLabels:
    app: app-extra-selector

secrets:
# --set secrets.test1.data.BAR=foo
  test1:
    data:
      BAR: foo
# --set "secrets.secret-file.data.api\.key=$SOME_ENV"
  secret-file:
    data:
      api.key: |-
        JFczZwReBkJFczZwReBkJFczZwReBkJFczZwReBk
# --set "secrets.domain-tls.labels.blah=blah,secrets.domain-tls.type=kubernetes.io\/tls,secrets.domain-tls.data.tls\.crt=$(cat tls.crt),secrets.domain-tls.data.tls\.key=$(cat tls.key)"
  domain-tls:
    labels:
      blah: blah
    data:
      tls.crt: |-
        -----BEGIN CERTIFICATE-----
        MIIC2DCCAcCgAwIBAgIBATANBgkqh
        -----END CERTIFICATE-----
      tls.key: |-
        -----BEGIN RSA PRIVATE KEY-----
        MIIEowIBAAKCAQEA1//LmU7tdWt/fgbqh1Feh+JFczZwReBkkyW
        -----END RSA PRIVATE KEY-----
    type: kubernetes.io/tls
# --set "secrets.json-file.data.file\.json=$(printf %q $(cat file.json))"
  json-file:
    data:
      file.json: {
          "arg": "value"
        }

configmaps:
- name: some-cm
  labels:
    kek: lol
  data:
    LOL: kek

# All PVSs will be added to `volumes` block in each workload excluding hooks
pvcs:
- name: app-pvc
  accessModes:
  - ReadWriteOnce
  - ReadWriteMany
  size: 8Gi

servicemonitors:
- endpoints:
  - interval: 30s
    port: exporter
    path: /metrics
  extraSelectorLabels:
    app: nginx
  labels:
    foo: foo

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard, nil
##
podAffinityPreset: soft

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard, nil
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

cronJobs:
  jobs:
  - name: generate-data
    schedule: "*/5 * * * *"
    command: "php yii crontab/generate-data"
    single_only: true
    duration_alert: 600
    max_duration: 800
  - name: auto-sender
    schedule: "*/5 * * * *"
    command: "php yii crontab/auto-sender"

jobs:
  jobs:
  - name: refresh-cache
    command: "php yii crontab/refresh-cache"
    duration_alert: 30
    max_duration: 60
